import { FileStat } from 'src/app/shared/common';
import { FileViewerService, OpenFileOption } from './file-viewer.service';

const extension2language = {
    "txt":          "txt",          "py":                "python",
    "abap":         "abap",         "abnf":              "abnf",
    "actionscript": "actionscript", "ada":               "ada",
    "agda":         "agda",         "al":                "al",
    "antlr4":       "antlr4",       "apacheconf":        "apacheconf",
    "apex":         "apex",         "apl":               "apl",
    "applescript":  "applescript",  "aql":               "aql",
    "arduino":      "arduino",      "arff":              "arff",
    "asciidoc":     "asciidoc",     "asm6502":           "asm6502",
    "asmatmel":     "asmatmel",     "aspnet":            "aspnet",
    "autohotkey":   "autohotkey",   "autoit":            "autoit",
    "avisynth":     "avisynth",     "avro-idl":          "avro-idl",
    "bash":         "bash",         "basic":             "basic",
    "sh":           "bash",
    "batch":        "batch",        "bbcode":            "bbcode",
    "bicep":        "bicep",        "birb":              "birb",
    "bison":        "bison",        "bnf":               "bnf",
    "brainfuck":    "brainfuck",    "brightscript":      "brightscript",
    "bro":          "bro",          "bsl":               "bsl",
    "c":            "c",            "cfscript":          "cfscript",
    "chaiscript":   "chaiscript",   "cil":               "cil",
    "clike":        "clike",        "clojure":           "clojure",
    "cmake":        "cmake",        "cobol":             "cobol",
    "coffeescript": "coffeescript", "concurnas":         "concurnas",
    "coq":          "coq",          "core":              "core",
    "cpp":          "cpp",          "crystal":           "crystal",
    "csharp":       "csharp",       "cshtml":            "cshtml",
    "csp":          "csp",          "css-extras":        "css-extras",
    "css":          "css",          "csv":               "csv",
    "cypher":       "cypher",       "d":                 "d",
    "dart":         "dart",         "dataweave":         "dataweave",
    "dax":          "dax",          "dhall":             "dhall",
    "diff":         "diff",         "django":            "django",
    "file":         "file",         "docker":            "docker",
    "dot":          "dot",          "ebnf":              "ebnf",
    "editorconfig": "editorconfig", "eiffel":            "eiffel",
    "ejs":          "ejs",          "elixir":            "elixir",
    "elm":          "elm",          "erb":               "erb",
    "erlang":       "erlang",       "etlua":             "etlua",
    "formula":      "formula",      "factor":            "factor",
    "false":        "false",        "rules":             "rules",
    "flow":         "flow",         "fortran":           "fortran",
    "fsharp":       "fsharp",       "ftl":               "ftl",
    "gap":          "gap",          "gcode":             "gcode",
    "gdscript":     "gdscript",     "gedcom":            "gedcom",
    "gherkin":      "gherkin",      "git":               "git",
    "glsl":         "glsl",         "gml":               "gml",
    "gn":           "gn",           "module":            "module",
    "go":           "go",           "graphql":           "graphql",
    "groovy":       "groovy",       "haml":              "haml",
    "handlebars":   "handlebars",   "haskell":           "haskell",
    "haxe":         "haxe",         "hcl":               "hcl",
    "hlsl":         "hlsl",         "hoon":              "hoon",
    "hpkp":         "hpkp",         "hsts":              "hsts",
    "http":         "http",         "ichigojam":         "ichigojam",
    "icon":         "icon",         "format":            "format",
    "idris":        "idris",        "iecst":             "iecst",
    "ignore":       "ignore",       "inform7":           "inform7",
    "ini":          "ini",          "io":                "io",
    "j":            "j",            "java":              "java",
    "javadoc":      "javadoc",      "javadoclike":       "javadoclike",
    "javascript":   "javascript",   "javastacktrace":    "javastacktrace",
    "js":           "javascript",
    "jexl":         "jexl",         "jolie":             "jolie",
    "jq":           "jq",           "js-extras":         "js-extras",
    "templates":    "templates",    "jsdoc":             "jsdoc",
    "json":         "json",         "json5":             "json5",
    "jsonp":        "jsonp",        "jsstacktrace":      "jsstacktrace",
    "jsx":          "jsx",          "julia":             "julia",
    "keepalived":   "keepalived",   "keyman":            "keyman",
    "kotlin":       "kotlin",       "kumir":             "kumir",
    "kusto":        "kusto",        "latex":             "latex",
    "tex":          "latex",
    "latte":        "latte",        "less":              "less",
    "lilypond":     "lilypond",     "liquid":            "liquid",
    "lisp":         "lisp",         "livescript":        "livescript",
    "llvm":         "llvm",         "log":               "log",
    "lolcode":      "lolcode",      "lua":               "lua",
    "magma":        "magma",        "makefile":          "makefile",
    "markdown":     "markdown",     "markup-templating": "markup-templating",
    "md":           "markdown",     
    "markup":       "markup",       "matlab":            "matlab",
    "maxscript":    "maxscript",    "mel":               "mel",
    "mermaid":      "mermaid",      "mizar":             "mizar",
    "mongodb":      "mongodb",      "monkey":            "monkey",
    "moonscript":   "moonscript",   "n1ql":              "n1ql",
    "n4js":         "n4js",         "hdl":               "hdl",
    "naniscript":   "naniscript",   "nasm":              "nasm",
    "neon":         "neon",         "nevod":             "nevod",
    "nginx":        "nginx",        "nim":               "nim",
    "nix":          "nix",          "nsis":              "nsis",
    "objectivec":   "objectivec",   "ocaml":             "ocaml",
    "opencl":       "opencl",       "openqasm":          "openqasm",
    "oz":           "oz",           "parigp":            "parigp",
    "parser":       "parser",       "pascal":            "pascal",
    "pascaligo":    "pascaligo",    "pcaxis":            "pcaxis",
    "peoplecode":   "peoplecode",   "perl":              "perl",
    "php-extras":   "php-extras",   "php":               "php",
    "phpdoc":       "phpdoc",       "plsql":             "plsql",
    "powerquery":   "powerquery",   "powershell":        "powershell",
    "ps1":          "powershell",
    "processing":   "processing",   "prolog":            "prolog",
    "promql":       "promql",       "properties":        "properties",
    "protobuf":     "protobuf",     "psl":               "psl",
    "pug":          "pug",          "puppet":            "puppet",
    "pure":         "pure",         "purebasic":         "purebasic",
    "purescript":   "purescript",   "python":            "python",
    "q":            "q",            "qml":               "qml",
    "qore":         "qore",         "qsharp":            "qsharp",
    "r":            "r",            "racket":            "racket",
    "reason":       "reason",       "regex":             "regex",
    "rego":         "rego",         "renpy":             "renpy",
    "rest":         "rest",         "rip":               "rip",
    "roboconf":     "roboconf",     "robotframework":    "robotframework",
    "ruby":         "ruby",         "rust":              "rust",
    "sas":          "sas",          "sass":              "sass",
    "scala":        "scala",        "scheme":            "scheme",
    "scss":         "scss",         "session":           "session",
    "smali":        "smali",        "smalltalk":         "smalltalk",
    "smarty":       "smarty",       "sml":               "sml",
    "solidity":     "solidity",     "solution-file":     "solution-file",
    "soy":          "soy",          "sparql":            "sparql",
    "spl":          "spl",          "sqf":               "sqf",
    "sql":          "sql",          "squirrel":          "squirrel",
    "stan":         "stan",         "stylus":            "stylus",
    "swift":        "swift",        "systemd":           "systemd",
    "cs":           "cs",           "t4-templating":     "t4-templating",
    "vb":           "vb",           "tap":               "tap",
    "tcl":          "tcl",          "textile":           "textile",
    "toml":         "toml",         "tremor":            "tremor",
    "tsx":          "tsx",          "tt2":               "tt2",
    "turtle":       "turtle",       "twig":              "twig",
    "typescript":   "typescript",   "typoscript":        "typoscript",
    "ts":           "typescript",
    "unrealscript": "unrealscript", "uorazor":           "uorazor",
    "uri":          "uri",          "v":                 "v",
    "vala":         "vala",         "vbnet":             "vbnet",
    "velocity":     "velocity",     "verilog":           "verilog",
    "vhdl":         "vhdl",         "vim":               "vim",
    "visualbasic":  "visual-basic", "warpscript":        "warpscript",
    "wasm":         "wasm",         "web-idl":           "web-idl",
    "wiki":         "wiki",         "wolfram":           "wolfram",
    "wren":         "wren",         "xeora":             "xeora",
    "doc":          "doc",          "xojo":              "xojo",
    "xquery":       "xquery",       "yaml":              "yaml",
    "yang":         "yang",         "zig":               "zig",
}

const support_extension = Object.getOwnPropertyNames(extension2language);
const max_size = 2 * 1024 * 1024;

async function handler(fileviewservice: FileViewerService, file: FileStat, _files: FileStat[], _findex: number, options: OpenFileOption): Promise<void> {
    const fs = fileviewservice.filesystem;
    const toastr = fileviewservice.toastr;
    const getsize = file.size < max_size ? file.size : max_size;

    try {
        const decoder = new TextDecoder("utf8");
        const buffer = await fs.read(file.filename, 0, getsize);
        const code = decoder.decode(buffer);
        const ext = options.extension || file.extension;
        const language = extension2language[ext];

        await fileviewservice.openfile.createTextViewer({
            filename: file.filename,
            code: code,
            language: language,
        }).wait();
    } catch (e) {
        toastr.danger(`open file failed: ${e}`, "OpenFile");
    }
}

export default(fileviewservice: FileViewerService) => {
    fileviewservice.registerHandlerEntries(handler, support_extension);
}
